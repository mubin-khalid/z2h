{
	"info": {
		"_postman_id": "9e773e2c-550c-4000-a609-967f4da2ba6b",
		"name": "z2h",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17354457",
		"_collection_link": "https://winter-sunset-622543.postman.co/workspace/dev~c857d043-761d-4e0f-888a-212130282bb3/collection/17354457-9e773e2c-550c-4000-a609-967f4da2ba6b?action=share&creator=17354457&source=collection_link"
	},
	"item": [
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Get All tasks With Filters",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im11YmluIiwiaWF0IjoxNzAyMjk4MjE4LCJleHAiOjE3MDIzMzQyMTh9.rbJKSMzn0cXe21WejVmdRs2YvFakG6tgFktiv8bjGa8",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer ",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{url}}/tasks?status=OPEN&search=a",
							"host": [
								"{{url}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								},
								{
									"key": "search",
									"value": "a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"taskId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let taskDescription = pm.variables.replaceIn('{{$randomLoremSentences}}')",
									"pm.variables.set(\"taskDescription\", taskDescription)",
									"",
									"//Generate random Task Title",
									"",
									"var taskTitle = pm.variables.replaceIn('{{$randomLoremWords}}')",
									"pm.variables.set(\"taskTitle\", taskTitle);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{taskTitle}}\",\n    \"description\": \"{{taskDescription}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tasks",
							"host": [
								"{{url}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Task by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/tasks/{{taskId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a task by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/tasks/{{taskId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(!pm.iterationData.has(\"status\")) {",
									"    var taskStatus = _.sample(JSON.parse(pm.environment.get('taskStatus')));",
									"    pm.variables.set(\"status\", taskStatus)",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"{{status}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/tasks/{{taskId}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Tasks",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/tasks",
							"host": [
								"{{url}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let sendRequest = false;",
							"pm.test('Access Token should have a value.', function(){",
							"    pm.expect(pm.environment.has('accessToken')).to.equal(true)",
							"    sendRequest = true;",
							"})",
							"if(!sendRequest) {",
							"    throw new Error('No Access Token found, please login first')",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Auth/User",
			"item": [
				{
					"name": "Sign Up",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var userName = pm.variables.replaceIn(\"{{$randomUserName}}\");",
									"var password = pm.variables.replaceIn(\"{{$randomPassword}}\");",
									"",
									"//Set the last created user for next steps",
									"pm.environment.set('userName', userName);",
									"pm.environment.set('password', password);",
									"let userMeta = JSON.parse(pm.environment.get('userMeta'))",
									"userMeta.push({userName, password})",
									"pm.environment.set('userMeta', JSON.stringify(userMeta))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{userName}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/sign-up",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"sign-up"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let sendRequest = false;",
									"var userName = pm.environment.get('userName')",
									"// var password = pm.environment.get('password')",
									"console.log(userName)",
									"pm.test('Username and Password should exist before making this call', function(){",
									"    pm.expect(pm.environment.has('userName')).to.equal(true);",
									"    pm.expect(pm.environment.has('password')).to.equal(true);",
									"    sendRequest = true;",
									"})",
									"if(!sendRequest) {",
									"    throw new Error('Username and Password should have proper value before making an API call')",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{userName}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/sign-in",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"sign-in"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}